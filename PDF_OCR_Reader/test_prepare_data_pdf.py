import unittest
from prepare_data_pdf import Prepare_Data_PDF
from PDF_information import PDF_Information

class testPrepareDataPDF(unittest.TestCase):

    def setUp(self):
        self.x = Prepare_Data_PDF()
        self.data =[[['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871'],
        ['5', '1', '2', '1', '1', '1', '259', '558', '100', '42', '96', 'This'],
        ['5', '1', '2', '1', '1', '2', '376', '558', '234', '53', '95', 'purchase'],
        ['5', '1', '2', '1', '1', '3', '629', '558', '137', '42', '96', 'order'],
        ['5', '1', '2', '1', '1', '4', '782', '569', '96', '31', '96', 'was'],
        ['5', '1', '2', '1', '1', '5', '897', '558', '233', '42', '95', 'delivered']],
        [['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871'],
        ['5', '1', '2', '1', '1', '1', '259', '558', '100', '42', '96', 'This'],
        ['5', '1', '2', '1', '1', '2', '376', '558', '234', '53', '95', 'purchase'],
        ['5', '1', '2', '1', '1', '3', '629', '558', '137', '42', '96', 'order'],
        ['5', '1', '2', '1', '1', '4', '782', '569', '96', '31', '96', 'was'],
        ['5', '1', '2', '1', '1', '5', '897', '558', '233', '42', '95', 'delivered']],
        [['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871'],
        ['5', '1', '2', '1', '1', '1', '259', '558', '100', '42', '96', 'This'],
        ['5', '1', '2', '1', '1', '2', '376', '558', '234', '53', '95', 'purchase'],
        ['5', '1', '2', '1', '1', '3', '629', '558', '137', '42', '96', 'order'],
        ['5', '1', '2', '1', '1', '4', '782', '569', '96', '31', '96', 'was'],
        ['5', '1', '2', '1', '1', '5', '897', '558', '233', '42', '95', 'delivered']]]



    def get_term(self, e):
        return e[5]

    
    def get_top1(self,e):
        return e[7]

    def get_left1(self,e):
        return e[6]

    def get_height1(self,e):
        return e[9]

    def get_width1(self,e):
        return e[8]
    
    def get_term1(self, e):
        return e[11]


    def test_add_page_height(self):
        pdf_i = PDF_Information()
        self.x.add_page_height(self.data, pdf_i.get_top_index)
        i = 0 
        for page in self.data:
            for term in page[1:]:
                self.assertGreater(int(pdf_i.get_top(term)),i*100000)
                self.assertLess(int(pdf_i.get_top(term)),(i+1)*100000)
            i = i+1
        # single term in pdf
        l_data = [[['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase']]]
        i = 0 
        for page in l_data:
            for term in page[1:]:
                self.assertGreater(int(pdf_i.get_top(term)),i*100000)
                self.assertLess(int(pdf_i.get_top(term)),(i+1)*100000)
            i = i+1
        # empty pdf
        l_data = [[]]
        i = 0 
        for page in l_data:
            for term in page[1:]:
                self.assertGreater(int(pdf_i.get_top(term)),i*100000)
                self.assertLess(int(pdf_i.get_top(term)),(i+1)*100000)
            i = i+1


    def test_pdf_term_tokenize(self):
        l_term = [1,2,3,4,5,'nathan@boardwalktech.com']
        out_put = self.x.pdf_term_tokenize(l_term, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, 'nathan', 0], [1, 2, 3, 4, 5, '@', 1], [1, 2, 3, 4, 5, 'boardwalktech.com', 2]])
        # no split
        l_term = [1,2,3,4,5,'nathan']
        out_put = self.x.pdf_term_tokenize(l_term, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, 'nathan', 0]])
        # split with comma in front
        l_term = [1,2,3,4,5,',nathan']
        out_put = self.x.pdf_term_tokenize(l_term, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, ',', 0],[1, 2, 3, 4, 5, 'nathan', 1]])
        # split with comma in end
        l_term = [1,2,3,4,5,'nathan,']
        out_put = self.x.pdf_term_tokenize(l_term, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, 'nathan', 0],[1, 2, 3, 4, 5, ',', 1]])
        # empty term
        l_term = [1,2,3,4,5,'']
        out_put = self.x.pdf_term_tokenize(l_term, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, '', 0]])
        # empty list
        l_term = []
        out_put = self.x.pdf_term_tokenize(l_term, 5, self.get_term, 0)
        self.assertEqual(out_put,[])


    def test_pdf_data_tokenize(self):
        l_data = [[1,2,3,4,5,'nathan@boardwalktech.com'],[1,2,3,4,12,'ram.lal']]
        out_put = self.x.pdf_data_tokenize(l_data, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, 'nathan', 0], [1, 2, 3, 4, 5, '@', 1], [1, 2, 3, 4, 5, 'boardwalktech.com', 2], [1, 2, 3, 4, 12, 'ram.lal', 0]]) 
        # single term in data
        l_data = [[1,2,3,4,5,'nathan@boardwalktech.com']]
        out_put = self.x.pdf_data_tokenize(l_data, 5, self.get_term, 0)
        self.assertEqual(out_put,[[1, 2, 3, 4, 5, 'nathan', 0], [1, 2, 3, 4, 5, '@', 1], [1, 2, 3, 4, 5, 'boardwalktech.com', 2]])
        # empty data
        l_data = []
        out_put = self.x.pdf_data_tokenize(l_data, 5, self.get_term, 0)
        self.assertEqual(out_put,[])


    def test_get_term_network(self):
        pdf_i = PDF_Information()
        l = [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase',0],
        [5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order',0],
        [5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':',1],
        [5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871',0],
        [5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This',0],
        [5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase',0]]
        indexes = [0,1,2,3,4,5,6,7,8,9,10]
        out_put = self.x.get_term_network(l, indexes, pdf_i.get_top, pdf_i.get_left, pdf_i.get_width, pdf_i.get_height, pdf_i.get_term)
        self.assertEqual(out_put, {(5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('right',
        32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('right', 32)], [[5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0], ('down', 198)], [[5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0], ('down', 198)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 335)]], (5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0): [[[5, 1, 1, 1, 1, 2, 698,
        283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('left', 32)], [[5, 1, 1,
        1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 32)]], (5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('left', 32)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 32)]], (5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('left', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('left', 32)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('left', 335)]], (5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0): [[[5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0], ('right', 17)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('up', 198)]], (5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0): [[[5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0], ('left', 17)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('up', 198)]]})

    def test_get_pdf_network(self):
        pdf_i = PDF_Information()
        pdf_i.rawData = [[['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871'],
        ['5', '1', '2', '1', '1', '1', '259', '558', '100', '42', '96', 'This']],
        [['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:hdh:jd'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871']]]
        
        self.x.clean_data(pdf_i)
        self.x.get_pdf_network(pdf_i,0)
        self.assertEqual(pdf_i.network, {(5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('down', 99923)]], (5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2], ('down', 99923)], [[5, 1, 1, 1,
        1, 2, 698, 100283, 271, 77, 91, ':', 3], ('down', 99923)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('down', 99923)]], (5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0], ('left', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('left', 32)], [[5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88,
        'AE10071871', 0], ('down', 99924)]], (5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0): [], (5, 1, 1, 1, 1, 2, 698, 100283,
        271, 77, 91, 'order', 0): [[[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0], ('up', 99923)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('up', 99923)]], (5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1): [[[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0], ('up', 99923)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('up', 99923)]], (5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2): [[[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5,
        1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0], ('up', 99923)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('up', 99923)]], (5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3): [[[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91,
        'hdh', 2], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'order', 0], ('up', 99923)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('up', 99923)]], (5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4): [[[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2], ('equal', 0)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3], ('equal', 0)], [[5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88, 'AE10071871', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2,
        698, 283, 271, 77, 91, 'order', 0], ('up', 99923)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('up', 99923)]], (5, 1, 1, 1, 1, 3, 1001, 100284, 558, 76, 88, 'AE10071871', 0): [[[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'order', 0], ('left',
        32)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 1], ('left', 32)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'hdh', 2], ('left', 32)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, ':', 3], ('left', 32)], [[5, 1, 1, 1, 1, 2, 698, 100283, 271, 77, 91, 'jd', 4], ('left', 32)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('up', 99924)]]})


    def test_clean_data(self):
        PDF_I = PDF_Information()
        PDF_I.rawData = [[['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871'],
        ['5', '1', '2', '1', '1', '1', '259', '558', '100', '42', '96', 'This'],
        ['5', '1', '2', '1', '1', '1', '259', '558', '100', '42', '96', ''],
        ['5', '1', '1', '1', '1', '1', '256', '284', '410', '76', '95', 'Purchase'],
        ['5', '1', '1', '1', '1', '2', '698', '283', '271', '77', '91', 'Order:hdh:jd'],
        ['5', '1', '1', '1', '1', '3', '1001', '284', '558', '76', '88', 'AE10071871']]]
        self.x.clean_data(PDF_I)
        # print(out_put)
        self.assertEqual(PDF_I.cleanData,[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order:'], [5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871'], [5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This'], [5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase'], [5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order:hdh:jd'], [5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871']])

    def test_add_term_to_line(self):
        pdf_info = PDF_Information()
        l_term = [[1,1,1,1,1,1,1,1,1,1,1,'user',0],('right',10)]
        out_put = self.x.add_term_to_line('hello', pdf_info.get_order_value, pdf_info.get_term_dict_value, l_term)
        self.assertEqual(out_put, 'hello user')

        l_term = [[1,1,1,1,1,1,1,1,1,1,1,'!',1],('right',10)]
        out_put = self.x.add_term_to_line('hello user', pdf_info.get_order_value, pdf_info.get_term_dict_value, l_term)
        self.assertEqual(out_put, 'hello user!')

        l_term = [[1,1,1,1,1,1,1,1,1,1,1,'hello',0],('right',10)]
        out_put = self.x.add_term_to_line('', pdf_info.get_order_value, pdf_info.get_term_dict_value, l_term)
        self.assertEqual(out_put, ' hello')

        l_term = [[1,1,1,1,1,1,1,1,1,1,1,'',0],('right',10)]
        out_put = self.x.add_term_to_line('hello', pdf_info.get_order_value, pdf_info.get_term_dict_value, l_term)
        self.assertEqual(out_put, 'hello ')

    def test_get_pdf_lines(self):
        PDF_Info = PDF_Information()
        PDF_Info.network = {(5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('right',
        32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('right', 32)], [[5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0], ('down', 198)], [[5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0], ('down', 198)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 335)]], (5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0): [[[5, 1, 1, 1, 1, 2, 698,
        283, 271, 77, 91, ':', 1], ('equal', 0)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('left', 32)], [[5, 1, 1,
        1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 32)]], (5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('equal', 0)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('left', 32)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 32)]], (5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('left', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('left', 32)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('left', 335)]], (5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0): [[[5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0], ('right', 17)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('up', 198)]], (5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0): [[[5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0], ('left', 17)], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], ('up', 198)]]}
        self.x.get_pdf_lines(PDF_Info)
        self.assertEqual(PDF_Info.PDF_Lines, [[['Purchase Order: AE10071871'], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('right', 32)], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, ':', 1], ('right', 32)], [[5, 1, 1, 1, 1, 3, 1001, 284, 558, 76, 88, 'AE10071871', 0], ('right', 335)]]], [['This purchase'], [[5, 1, 2, 1, 1, 1, 259, 558, 100, 42, 96, 'This', 0], [[5, 1, 2, 1, 1, 2, 376, 558, 234, 53, 95, 'purchase', 0], ('right', 17)]]]])

        PDF_Info.network = {(5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0): [[[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('right',
        32)]]}
        self.x.get_pdf_lines(PDF_Info)
        self.assertEqual(PDF_Info.PDF_Lines, [[['Purchase Order'], [[5, 1, 1, 1, 1, 1, 256, 284, 410, 76, 95, 'Purchase', 0], [[5, 1, 1, 1, 1, 2, 698, 283, 271, 77, 91, 'Order', 0], ('right', 32)]]]])

        PDF_Info.network = {}
        PDF_Info.PDF_Lines = []
        self.x.get_pdf_lines(PDF_Info)
        self.assertEqual(PDF_Info.PDF_Lines, [])


if __name__ == "__main__":
    unittest.main()
    # PDP = testPrepareDataPDF()
    # PDP.setUp()
    # PDP.test_add_page_height()
    # PDP.test_pdf_data_tokenize()
    # PDP.test_clean_data()