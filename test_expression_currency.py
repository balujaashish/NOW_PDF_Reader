import unittest
from Expression.expression_currency import Expression_Currency
import z_test_data

class testExpressionCurrency(unittest.TestCase):

    def setUp(self):
        self.PDF_Info = z_test_data.PDF_Info
        self.supporting_data = []
        self.attributes = []
        self.x = Expression_Currency(self.PDF_Info, self.supporting_data, self.attributes)



    def test_qualify(self):
        l_currency = [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 15, 1, 1, 3, 900, 4132, 345, 55, 92, 'DETAILS'], ['ILS', None, None]], [[5, 1, 15, 1, 1, 4, 1279, 4130, 66, 71, 96, '(1'], [None, 1, '1']]], [[[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 16, 1, 5, 5, 2219, 4629, 79, 57, 86, '29,'], [None, 29, '29']], [[5, 1, 16, 1, 5, 6, 2394, 4629, 132, 47, 67, 'USD'], ['USD', None, None]]], [[[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]]]
        out_put = self.x.qualify(l_currency)
        self.assertEqual(out_put, [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]])

        # no qualify
        l_currency = [[[[5, 1, 15, 1, 1, 3, 900, 4132, 345, 55, 92, 'DETAILS'], ['ILS', None, None]]], [[[5, 1, 15, 1, 1, 4, 1279, 4130, 66, 71, 96, '(1'], [None, 1, '1']]], [[[5, 1, 16, 1, 5, 5, 2219, 4629, 79, 57, 86, '29,'], [None, 29, '29']]], [[[5, 1, 16, 1, 5, 6, 2394, 4629, 132, 47, 67, 'USD'], ['USD', None, None]]]]
        out_put = self.x.qualify(l_currency)
        self.assertEqual(out_put, [])

        # one qualify
        l_currency = [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 15, 1, 1, 3, 900, 4132, 345, 55, 92, 'DETAILS'], ['ILS', None, None]]], [[[5, 1, 15, 1, 1, 4, 1279, 4130, 66, 71, 96, '(1'], [None, 1, '1']]], [[[5, 1, 16, 1, 5, 5, 2219, 4629, 79, 57, 86, '29,'], [None, 29, '29']]], [[[5, 1, 16, 1, 5, 6, 2394, 4629, 132, 47, 67, 'USD'], ['USD', None, None]]]]
        out_put = self.x.qualify(l_currency)
        self.assertEqual(out_put, [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]])
        
        # all qualify
        l_currency = [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00'], ['$', 10000.0, '10,000.00']]], [[[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]]]
        out_put = self.x.qualify(l_currency)
        self.assertEqual(out_put, [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]])
        # print(out_put)


    def test_prepare_currency_data(self):
        p_currency = [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00'], ['$', 10000.0, '10,000.00']], [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]]
        out_put = self.x.prepare_currency_data(p_currency)
        self.assertEqual(out_put, [['$10,000.00', [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00']]], ['$10,000.00', [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00']]]])

        # single term list
        p_currency = [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00'], ['$', 10000.0, '10,000.00']]]
        out_put = self.x.prepare_currency_data(p_currency)
        self.assertEqual(out_put, [['$10,000.00', [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']]]])

        # empty list
        p_currency = []
        out_put = self.x.prepare_currency_data(p_currency)
        self.assertEqual(out_put, [])

    def test_currency_expression(self):
        p_currency = [['$10,000.00', [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00']]], ['$10,000.00', [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00']]]]
        p_keyword = ['TOTAL AMOUNT', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0],[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]
        out_put = self.x.currency_expression(p_keyword, p_currency)
        self.assertEqual(len(out_put), 2)
        self.assertEqual(out_put[0], ['TOTAL AMOUNT', '$10,000.00', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]])
        
        # no align
        p_currency = [['$10,000.00', [[5, 1, 8, 1, 1, 3, 31000, 14200, 480, 90, 95, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00']]], ['$10,000.00', [[5, 1, 4, 1, 2, 1, 3042, 100930, 4080, 90, 95, '$10,000.00']]]]
        p_keyword = ['TOTAL AMOUNT', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0],[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]
        out_put = self.x.currency_expression(p_keyword, p_currency)
        self.assertEqual(out_put,[])

        # one term align only
        p_currency = [['$10,000.00', [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00']]], ['$10,000.00', [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00']]]]
        p_keyword = ['TOTAL AMOUNT', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0],[5, 1, 6, 1, 1, 6, 1027, 101233, 201, 39, 95, 'Products', 0]]]]
        out_put = self.x.currency_expression(p_keyword, p_currency)
        self.assertEqual(len(out_put), 2)
        self.assertEqual(out_put[0], ['TOTAL AMOUNT', '$10,000.00', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 2, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 6, 1, 1, 6, 1027, 101233, 201, 39, 95, 'Products', 0]]])
        
        # empty currency list
        p_currency = []
        p_keyword = ['TOTAL AMOUNT', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0],[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]
        out_put = self.x.currency_expression(p_keyword, p_currency)
        self.assertEqual(out_put,[])

        # empty keyword
        p_currency = [['$10,000.00', [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 6, 2396, 4548, 299, 60, 93, '$10,000.00']]], ['$10,000.00', [[5, 1, 16, 1, 4, 8, 2809, 4548, 299, 60, 90, '$10,000.00']]], ['$10,000.00', [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00']]]]
        p_keyword = []
        out_put = self.x.currency_expression(p_keyword, p_currency)
        self.assertEqual(out_put,[])

    
    def test_extract_currency_expression(self):
        p_currency_dtls = [['TOTAL AMOUNT', '$10,000.00', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]
        out_put = self.x.extract_currency_expression(p_currency_dtls)
        self.assertEqual(out_put,[['TOTAL AMOUNT', '$10,000.00', [[[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]])
        
        # 2 terms match
        p_currency_dtls = [['TOTAL AMOUNT', '$10,000.00', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]], ['TOTAL AMOUNT', '$10,000.00', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]
        out_put = self.x.extract_currency_expression(p_currency_dtls)
        self.assertEqual(out_put,[['TOTAL AMOUNT', '$10,000.00', [[[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]], ['TOTAL AMOUNT', '$10,000.00', [[[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]])

        # empty list
        p_currency_dtls = []
        out_put = self.x.extract_currency_expression(p_currency_dtls)
        self.assertEqual(out_put,[])
        


    
    def test_get(self):
        p_keyword = ['TOTAL AMOUNT', [[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0],[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]
        out_put = self.x.get(p_keyword)
        self.assertEqual(out_put, [['TOTAL AMOUNT', '$10,000.00', [[[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], []], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], []]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 27, 'max': 27}, [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]], ['TOTAL AMOUNT', '$10,000.00', [[[[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [[[[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$', 0], ('down', 99537)], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], [[5, 1, 16, 1, 1, 8, 3155, 4286, 222, 46, 95, 'ORDER', 0], ('down', 2893)], [[5, 1, 16, 1, 2, 4, 3155, 4356, 478, 47, 95, 'CONFIRMATION', 0], ('down', 2963)], [[5, 1, 16, 1, 3, 1, 3154, 4428, 246, 47, 92, 'STATUS', 0], ('down', 3035)], [[5, 1, 16, 1, 4, 9, 3152, 4550, 361, 48, 95, 'Unconfirmed', 0], ('down', 3157)], [[5, 1, 17, 1, 1, 12, 2970, 4825, 319, 62, 96, 'Application', 0], ('down', 3432)], [[5, 1, 17, 1, 1, 13, 3307, 4825, 188, 62, 96, 'Engine', 0], ('down', 3432)], [[5, 1, 4, 1, 1, 1, 3113, 100848, 262, 55, 96, 'TOTAL', 0], ('down', 99455)], [[5, 1, 4, 1, 1, 2, 3402, 100848, 356, 55, 96, 'AMOUNT', 0], ('down', 99455)]]], [[[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '10,000.00', 1], ('down', 99537)], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], [[5, 1, 16, 1, 1, 8, 3155, 4286, 222, 46, 95, 'ORDER', 0], ('down', 2893)], [[5, 1, 16, 1, 2, 4, 3155, 4356, 478, 47, 95, 'CONFIRMATION', 0], ('down', 2963)], [[5, 1, 16, 1, 3, 1, 3154, 4428, 246, 47, 92, 'STATUS', 0], ('down', 3035)], [[5, 1, 16, 1, 4, 9, 3152, 4550, 361, 48, 95, 'Unconfirmed', 0], ('down', 3157)], [[5, 1, 17, 1, 1, 12, 2970, 4825, 319, 62, 96, 'Application', 0], ('down', 3432)], [[5, 1, 17, 1, 1, 13, 3307, 4825, 188, 62, 96, 'Engine', 0], ('down', 3432)], [[5, 1, 4, 1, 1, 1, 3113, 100848, 262, 55, 96, 'TOTAL', 0], ('down', 99455)], [[5, 1, 4, 1, 1, 2, 3402, 100848, 356, 55, 96, 'AMOUNT', 0], ('down', 99455)]]]]], [[5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0], [[[[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$', 0], ('down', 99537)], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], [[5, 1, 8, 1, 1, 4, 3619, 1425, 193, 72, 95, 'USD', 0], ('down', 32)], [[5, 1, 16, 1, 2, 4, 3155, 4356, 478, 47, 95, 'CONFIRMATION', 0], ('down', 2963)], [[5, 1, 16, 1, 4, 9, 3152, 4550, 361, 48, 95, 'Unconfirmed', 0], ('down', 3157)], [[5, 1, 17, 1, 1, 13, 3307, 4825, 188, 62, 96, 'Engine', 0], ('down', 3432)], [[5, 1, 18, 1, 1, 3, 3539, 5420, 333, 59, 96, '2/20/2020', 0], ('down', 4027)], [[5, 1, 1, 1, 1, 5, 3746, 100016, 74, 59, 95, 'of', 0], ('down', 98623)], [[5, 1, 1, 1, 1, 4, 3682, 100018, 36, 56, 96, '2', 0], ('down', 98625)], [[5, 1, 1, 1, 1, 3, 3498, 100019, 159, 73, 95, 'Page', 0], ('down', 98626)], [[5, 1, 4, 1, 1, 2, 3402, 100848, 356, 55, 96, 'AMOUNT', 0], ('down', 99455)]]], [[[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '10,000.00', 1], ('down', 99537)], [[[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '$', 0], ('down', 27)], [[5, 1, 8, 1, 1, 3, 3100, 1420, 480, 90, 95, '10,000.00', 1], ('down', 27)], [[5, 1, 8, 1, 1, 4, 3619, 1425, 193, 72, 95, 'USD', 0], ('down', 32)], [[5, 1, 16, 1, 2, 4, 3155, 4356, 478, 47, 95, 'CONFIRMATION', 0], ('down', 2963)], [[5, 1, 16, 1, 4, 9, 3152, 4550, 361, 48, 95, 'Unconfirmed', 0], ('down', 3157)], [[5, 1, 17, 1, 1, 13, 3307, 4825, 188, 62, 96, 'Engine', 0], ('down', 3432)], [[5, 1, 18, 1, 1, 3, 3539, 5420, 333, 59, 96, '2/20/2020', 0], ('down', 4027)], [[5, 1, 1, 1, 1, 5, 3746, 100016, 74, 59, 95, 'of', 0], ('down', 98623)], [[5, 1, 1, 1, 1, 4, 3682, 100018, 36, 56, 96, '2', 0], ('down', 98625)], [[5, 1, 1, 1, 1, 3, 3498, 100019, 159, 73, 95, 'Page', 0], ('down', 98626)], [[5, 1, 4, 1, 1, 2, 3402, 100848, 356, 55, 96, 'AMOUNT', 0], ('down', 99455)]]]]]], {'right': 0, 'down': 4, 'equal': 0}, {'min': 99537, 'max': 99537}, [[5, 1, 4, 1, 2, 1, 3042, 100930, 480, 90, 95, '$10,000.00']], [[5, 1, 7, 1, 1, 2, 3171, 1338, 262, 55, 95, 'TOTAL', 0], [5, 1, 7, 1, 1, 3, 3460, 1338, 356, 55, 94, 'AMOUNT', 0]]]]])
        



if __name__ == "__main__":
    unittest.main()
    # TEC = testExpressionCurrency()
    # TEC.setUp()
    # TEC.test_get()