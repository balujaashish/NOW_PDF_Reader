import unittest

from Expression.expression_list import Expression_List
from Expression.supporting_data import Supporting_Data

import z_test_data


class testExpressionList(unittest.TestCase):

    def setUp(self):
        self.PDF_Info = z_test_data.PDF_Info
        p_data = {(2000010, 838, 8389,'Purchase order number'): [[9829,939, 883,'6000567751'],[9829,939,921,'February 20, 2020']],(2000011, 839, 8390,'Addresses'):[[9830,940, 884,'BOARDWALKTECH, INC 10050 N. Wolfe Rd. #276 Cupertino , CA 95014 United States'], [9831,941, 885,'Teva Bazel 5 5 Bazel St. 4951033 Petah Tikva Israel']],(2000011, 839, 8390,'keywords'):[[9830,940, 884,'Amount'], [9830,940, 884,'ORDER NO']]}
        self.supporting_data = Supporting_Data(p_data)
        self.attributes = []
        self.x = Expression_List(self.PDF_Info, self.supporting_data, self.attributes)

    def test_search_list_data_pdf_info(self):
        l_date = ['ORDER NO']
        out_put = self.x.search_list_data_pdf_info(l_date)
        self.assertEqual(out_put, {'ORDER NO': [[[5, 1, 3, 1, 1, 1, 452, 852, 389, 81, 95, 'ORDER', 0], [5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, 'no', 0]]]})

        # multiple dates
        l_date = ['ORDER NO', '6000567751']
        out_put = self.x.search_list_data_pdf_info(l_date)
        self.assertEqual(out_put, {'ORDER NO': [[[5, 1, 3, 1, 1, 1, 452, 852, 389, 81, 95, 'ORDER', 0], [5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, 'no', 0]]], '6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]], [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]], [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]]})

        # empty list
        l_date = []
        out_put = self.x.search_list_data_pdf_info(l_date)
        self.assertEqual(out_put, {})

        # no match
        l_date = ['ORDER jd NO', '60005u67751']
        out_put = self.x.search_list_data_pdf_info(l_date)
        self.assertEqual(out_put, {'ORDER jd NO': [], '60005u67751': []})

        # one match, one no match
        l_date = ['ORDER hd NO', '6000567751']
        out_put = self.x.search_list_data_pdf_info(l_date)
        self.assertEqual(out_put, {'ORDER hd NO': [], '6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]], [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]], [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]]})


    def test_get_list_data_pdf_info(self):
        out_put = self.x.get_list_data_pdf_info('Purchase order number')
        self.assertEqual(out_put, {'6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]], [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]], [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]], 'February 20, 2020': [[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], [5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0]], [[5, 1, 4, 1, 2, 4, 1179, 1056, 285, 67, 95, 'February', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, '20', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, ',', 1], [5, 1, 4, 1, 2, 6, 1609, 1056, 156, 53, 95, '2020', 0]]]})

        # single term in supporting data list
        p_data = {(2000010, 838, 8389,'Purchase order number'): [[9829,939, 883,'6000567751']],(2000011, 839, 8390,'Addresses'):[[9830,940, 884,'BOARDWALKTECH, INC 10050 N. Wolfe Rd. #276 Cupertino , CA 95014 United States'], [9831,941, 885,'Teva Bazel 5 5 Bazel St. 4951033 Petah Tikva Israel']],(2000011, 839, 8390,'keywords'):[[9830,940, 884,'Amount'], [9830,940, 884,'ORDER NO']]}
        self.supporting_data.data = p_data
        out_put = self.x.get_list_data_pdf_info('Purchase order number')
        self.assertEqual(out_put, {'6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]], [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]], [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]]})

        # empty supporting data list
        p_data = {(2000010, 838, 8389,'Purchase order number'): [],(2000011, 839, 8390,'Addresses'):[[9830,940, 884,'BOARDWALKTECH, INC 10050 N. Wolfe Rd. #276 Cupertino , CA 95014 United States'], [9831,941, 885,'Teva Bazel 5 5 Bazel St. 4951033 Petah Tikva Israel']],(2000011, 839, 8390,'keywords'):[[9830,940, 884,'Amount'], [9830,940, 884,'ORDER NO']]}
        self.supporting_data.data = p_data
        out_put = self.x.get_list_data_pdf_info('Purchase order number')
        self.assertEqual(out_put, {})

        # list not present in supporting data
        p_data = {(2000011, 839, 8390,'Addresses'):[[9830,940, 884,'BOARDWALKTECH, INC 10050 N. Wolfe Rd. #276 Cupertino , CA 95014 United States'], [9831,941, 885,'Teva Bazel 5 5 Bazel St. 4951033 Petah Tikva Israel']],(2000011, 839, 8390,'keywords'):[[9830,940, 884,'Amount'], [9830,940, 884,'ORDER NO']]}
        self.supporting_data.data = p_data
        out_put = self.x.get_list_data_pdf_info('Purchase order number')
        self.assertEqual(out_put, {})



    def test_strip_details(self):
        p_data = {'6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]], [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]], [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]], 'February 20, 2020': [[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], [5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0]], [[5, 1, 4, 1, 2, 4, 1179, 1056, 285, 67, 95, 'February', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, '20', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, ',', 1], [5, 1, 4, 1, 2, 6, 1609, 1056, 156, 53, 95, '2020', 0]]]}
        out_put = self.x.strip_details(p_data)
        self.assertEqual(out_put, [['6000567751', [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]]], ['6000567751', [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]]], ['6000567751', [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]], ['February 20, 2020', [[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], [5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0]]], ['February 20, 2020', [[5, 1, 4, 1, 2, 4, 1179, 1056, 285, 67, 95, 'February', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, '20', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, ',', 1], [5, 1, 4, 1, 2, 6, 1609, 1056, 156, 53, 95, '2020', 0]]]])

        # single entry
        p_data = {'6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]], [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]], [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]]}
        out_put = self.x.strip_details(p_data)
        self.assertEqual(out_put, [['6000567751', [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]]], ['6000567751', [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]]], ['6000567751', [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]]])

        # single entry in single entry
        p_data = {'6000567751': [[[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]]]}
        out_put = self.x.strip_details(p_data)
        self.assertEqual(out_put, [['6000567751', [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]]]])

        # empty list
        p_data = {}
        out_put = self.x.strip_details(p_data)
        self.assertEqual(out_put, [])



    def test_list_expression(self):
        print('---------------------------inside--test_strip_details--------------------------------')
        l_list_data = [['6000567751', [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]]], ['6000567751', [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]]], ['6000567751', [[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0]]], ['February 20, 2020', [[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], [5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0]]], ['February 20, 2020', [[5, 1, 4, 1, 2, 4, 1179, 1056, 285, 67, 95, 'February', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, '20', 0], [5, 1, 4, 1, 2, 5, 1487, 1056, 93, 62, 94, ',', 1], [5, 1, 4, 1, 2, 6, 1609, 1056, 156, 53, 95, '2020', 0]]]]
        l_keywords = ['ORDER NO',[[[5, 1, 3, 1, 1, 1, 452, 852, 389, 81, 95, 'ORDER', 0], [5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, 'no', 0]]]]
        out_put = self.x.list_expression(l_keywords, l_list_data)

        # no align
        
        # one term align only
        # empty date list
        # empty keyword

        print(out_put)


    # def test_extract_list_expression(self):
    #     l_data = [['ORDER NO', '6000567751', [[[5, 1, 3, 1, 1, 1, 452, 852, 389, 81, 95, 'ORDER', 0], [[[[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0], ('right', 262)], [[[5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, '.', 1], ('right', 40)]]]]], [[5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, 'no', 0], [[[[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0], ('right', 43)], []]]]], {'right': 2, 'down': 0, 'equal': 0}, {'min': 43, 'max': 262}], ['ORDER NO', '6000567751', [[[5, 1, 3, 1, 1, 1, 452, 852, 389, 81, 95, 'ORDER', 0], [[[[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0], ('down', 99085)], [[[5, 1, 4, 1, 1, 1, 454, 973, 203, 53, 95, 'Issued', 0], ('down', 40)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('down', 40)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('down', 40)], [[5, 1, 4, 1, 1, 2, 685, 986, 74, 40, 96, 'on', 0], ('down', 53)], [[5, 1, 4, 1, 2, 1, 451, 1055, 250, 54, 95, 'Created', 0], ('down', 122)], [[5, 1, 4, 1, 2, 3, 830, 1056, 316, 67, 95, 'thursday', 0], ('down', 123)], [[5, 1, 4, 1, 2, 3, 830, 1056, 316, 67, 95, ',', 1], ('down', 123)], [[5, 1, 4, 1, 2, 2, 729, 1069, 75, 40, 96, 'on', 0], ('down', 136)], [[5, 1, 7, 1, 1, 1, 451, 1354, 428, 55, 73, 'supplier', 0], ('down', 421)], [[5, 1, 7, 1, 1, 1, 451, 1354, 428, 55, 73, ':', 1], ('down', 421)], [[5, 1, 8, 1, 1, 1, 448, 1439, 662, 50, 91, 'BOARDWALKTECH', 0], ('down', 506)], [[5, 1, 8, 1, 2, 1, 456, 1523, 171, 50, 96, '10050', 0], ('down', 590)], [[5, 1, 8, 1, 2, 3, 720, 1523, 203, 50, 95, 'WOLF', 0], ('down', 590)], [[5, 1, 8, 1, 2, 2, 647, 1524, 53, 49, 96, 'N', 0], ('down', 591)], [[5, 1, 9, 1, 1, 1, 450, 1607, 421, 61, 90, 'cupertino', 0], ('down', 674)], [[5, 1, 9, 1, 1, 1, 450, 1607, 421, 61, 90, ',', 1], ('down', 674)], [[5, 1, 9, 1, 2, 1, 447, 1688, 199, 52, 94, 'United', 0], ('down', 755)], [[5, 1, 9, 1, 2, 2, 669, 1690, 167, 50, 95, 'States', 0], ('down', 757)], [[5, 1, 9, 2, 1, 1, 448, 1772, 196, 52, 93, 'phone', 0], ('down', 839)], [[5, 1, 9, 2, 1, 1, 448, 1772, 196, 52, 93, ':', 1], ('down', 839)], [[5, 1, 9, 2, 1, 2, 669, 1774, 68, 49, 93, '+1', 0], ('down', 841)], [[5, 1, 9, 2, 1, 3, 767, 1774, 408, 50, 89, '650-618-6100', 0], ('down', 841)], [[5, 1, 9, 2, 2, 2, 596, 1858, 68, 49, 92, '+1', 0], ('down', 925)], [[5, 1, 9, 2, 2, 3, 694, 1858, 408, 50, 96, '650-618-6206', 0], ('down', 925)], [[5, 1, 9, 2, 2, 1, 448, 1859, 123, 49, 92, 'fax', 0], ('down', 926)], [[5, 1, 9, 2, 2, 1, 448, 1859, 123, 49, 92, ':', 1], ('down', 926)], [[5, 1, 10, 1, 1, 1, 470, 2078, 405, 53, 95, 'DELIVERY', 0], ('down', 1145)], [[5, 1, 10, 2, 1, 1, 464, 2163, 435, 50, 84, 'ACCENTURE', 0], ('down', 1230)], [[5, 1, 10, 3, 1, 1, 467, 2246, 103, 50, 95, '500', 0], ('down', 1313)], [[5, 1, 10, 3, 1, 2, 594, 2246, 293, 50, 95, 'CAMPUS', 0], ('down', 1313)], [[5, 1, 10, 3, 2, 1, 464, 2330, 354, 50, 88, 'FLORHAM', 0], ('down', 1397)], [[5, 1, 10, 3, 2, 2, 839, 2330, 208, 61, 92, 'park', 0], ('down', 1397)], [[5, 1, 10, 3, 2, 2, 839, 2330, 208, 61, 92, ',', 1], ('down', 1397)], [[5, 1, 10, 4, 1, 1, 463, 2412, 199, 52, 95, 'United', 0], ('down', 1479)], [[5, 1, 10, 4, 1, 2, 685, 2414, 166, 50, 96, 'States', 0], ('down', 1481)], [[5, 1, 12, 1, 1, 1, 470, 2691, 352, 53, 95, 'DELIVER', 0], ('down', 1758)], [[5, 1, 12, 1, 2, 1, 466, 2773, 1035, 67, 85, 'edsel.j.d.manucom', 0], ('down', 1840)], [[5, 1, 12, 1, 2, 1, 466, 2773, 1035, 67, 85, '@', 1], ('down', 1840)], [[5, 1, 12, 1, 2, 1, 466, 2773, 1035, 67, 85, 'accenture.com', 2], ('down', 1840)], [[5, 1, 13, 1, 1, 1, 466, 2880, 130, 50, 96, 'Cost', 0], ('down', 1947)], [[5, 1, 13, 1, 1, 2, 618, 2880, 205, 50, 95, 'center', 0], ('down', 1947)], [[5, 1, 13, 1, 1, 2, 618, 2880, 205, 50, 95, ':', 1], ('down', 1947)], [[5, 1, 13, 1, 2, 2, 646, 2961, 169, 52, 95, 'class', 0], ('down', 2028)], [[5, 1, 13, 1, 2, 2, 646, 2961, 169, 52, 95, ':', 1], ('down', 2028)], [[5, 1, 13, 1, 2, 1, 464, 2963, 161, 50, 95, 'Asset', 0], ('down', 2030)], [[5, 1, 13, 1, 3, 1, 466, 3045, 205, 67, 96, 'Charge', 0], ('down', 2112)], [[5, 1, 13, 1, 3, 2, 695, 3045, 165, 52, 96, 'code', 0], ('down', 2112)], [[5, 1, 13, 1, 3, 2, 695, 3045, 165, 52, 96, ':', 1], ('down', 2112)], [[5, 1, 13, 1, 4, 2, 640, 3129, 256, 52, 94, 'element', 0], ('down', 2196)], [[5, 1, 13, 1, 4, 2, 640, 3129, 256, 52, 94, ':', 1], ('down', 2196)], [[5, 1, 13, 1, 4, 1, 464, 3131, 153, 50, 96, 'WBS', 0], ('down', 2198)], [[5, 1, 13, 1, 5, 1, 465, 3213, 223, 52, 95, 'Internal', 0], ('down', 2280)], [[5, 1, 13, 1, 5, 2, 711, 3213, 181, 52, 95, 'order', 0], ('down', 2280)], [[5, 1, 13, 1, 5, 2, 711, 3213, 181, 52, 95, ':', 1], ('down', 2280)], [[5, 1, 13, 1, 6, 1, 464, 3297, 165, 52, 95, 'Profit', 0], ('down', 2364)], [[5, 1, 13, 1, 6, 2, 650, 3299, 206, 50, 95, 'center', 0], ('down', 2366)], [[5, 1, 13, 1, 6, 2, 650, 3299, 206, 50, 95, ':', 1], ('down', 2366)], [[5, 1, 13, 1, 7, 1, 620, 3381, 165, 52, 95, 'Profit', 0], ('down', 2448)], [[5, 1, 13, 1, 7, 2, 807, 3383, 205, 50, 94, 'center', 0], ('down', 2450)], [[5, 1, 13, 1, 7, 2, 807, 3383, 205, 50, 94, ':', 1], ('down', 2450)], [[5, 1, 13, 1, 8, 1, 464, 3464, 166, 52, 96, 'Fixed', 0], ('down', 2531)], [[5, 1, 13, 1, 8, 2, 648, 3466, 161, 50, 96, 'Asset', 0], ('down', 2533)], [[5, 1, 13, 1, 8, 3, 831, 3466, 130, 50, 96, 'Cost', 0], ('down', 2533)], [[5, 1, 13, 1, 9, 2, 738, 3550, 356, 50, 94, '0010001015', 0], ('down', 2617)], [[5, 1, 13, 1, 9, 1, 621, 3551, 89, 49, 94, 'id', 0], ('down', 2618)], [[5, 1, 13, 1, 9, 1, 621, 3551, 89, 49, 94, ':', 1], ('down', 2618)], [[5, 1, 13, 1, 10, 1, 466, 3632, 226, 52, 95, 'General', 0], ('down', 2699)], [[5, 1, 13, 1, 10, 2, 713, 3632, 219, 67, 95, 'ledger', 0], ('down', 2699)], [[5, 1, 13, 1, 10, 2, 713, 3632, 219, 67, 95, ':', 1], ('down', 2699)], [[5, 1, 13, 1, 11, 2, 738, 3718, 353, 50, 94, '0000145011', 0], ('down', 2785)], [[5, 1, 13, 1, 11, 1, 621, 3719, 89, 49, 95, 'id', 0], ('down', 2786)], [[5, 1, 13, 1, 11, 1, 621, 3719, 89, 49, 95, ':', 1], ('down', 2786)], [[5, 1, 13, 1, 12, 3, 749, 3800, 165, 52, 95, 'code', 0], ('down', 2867)], [[5, 1, 13, 1, 12, 3, 749, 3800, 165, 52, 95, ':', 1], ('down', 2867)], [[5, 1, 13, 1, 12, 1, 468, 3802, 126, 50, 96, 'SAP', 0], ('down', 2869)], [[5, 1, 13, 1, 12, 2, 617, 3803, 111, 49, 95, 'Tax', 0], ('down', 2870)], [[5, 1, 14, 1, 1, 2, 700, 3948, 223, 50, 96, 'Contact', 0], ('down', 3015)], [[5, 1, 14, 1, 1, 1, 433, 3949, 246, 64, 96, 'Preparer', 0], ('down', 3016)], [[5, 1, 15, 1, 1, 1, 444, 4133, 186, 53, 94, 'LINE', 0], ('down', 3200)], [[5, 1, 15, 1, 1, 2, 664, 4133, 197, 53, 95, 'ITEM', 0], ('down', 3200)], [[5, 1, 16, 1, 1, 2, 615, 4285, 418, 47, 96, 'DESCRIPTION', 0], ('down', 3352)], [[5, 1, 16, 1, 1, 1, 463, 4286, 102, 46, 95, 'no', 0], ('down', 3353)], [[5, 1, 16, 1, 1, 1, 463, 4286, 102, 46, 95, '.', 1], ('down', 3353)], [[5, 1, 16, 1, 4, 1, 466, 4551, 18, 46, 96, '1', 0], ('down', 3618)], [[5, 1, 16, 1, 4, 2, 613, 4551, 255, 61, 84, 'Proquire', 0], ('down', 3618)], [[5, 1, 16, 1, 5, 1, 612, 4629, 669, 61, 84, 'LLC_BoardwalkTech_', 0], ('down', 3696)], [[5, 1, 16, 1, 6, 1, 614, 4706, 273, 61, 80, 'C_Annual', 0], ('down', 3773)], [[5, 1, 17, 1, 1, 1, 459, 4825, 106, 48, 95, 'Full', 0], ('down', 3892)], [[5, 1, 17, 1, 1, 2, 585, 4825, 328, 62, 93, 'description', 0], ('down', 3892)], [[5, 1, 17, 1, 1, 2, 585, 4825, 328, 62, 93, ':', 1], ('down', 3892)], [[5, 1, 18, 1, 1, 1, 376, 5420, 1723, 76, 58, 'https', 0], ('down', 4487)], [[5, 1, 18, 1, 1, 1, 376, 5420, 1723, 76, 58, ':', 1], ('down', 4487)], [[5, 1, 18, 1, 1, 1, 376, 5420, 1723, 76, 58, '//s1.ariba.com/buyer/render/1hx982g4bjpv', 2], ('down', 4487)], [[5, 1, 1, 1, 1, 1, 378, 100016, 191, 59, 95, 'Order', 0], ('down', 99083)]]]]], [[5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, 'no', 0], [[[[5, 1, 1, 1, 1, 2, 594, 100018, 402, 57, 95, '6000567751', 0], ('down', 99085)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('down', 40)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('down', 40)], [[5, 1, 4, 1, 2, 3, 830, 1056, 316, 67, 95, 'thursday', 0], ('down', 123)], [[5, 1, 4, 1, 2, 3, 830, 1056, 316, 67, 95, ',', 1], ('down', 123)], [[5, 1, 8, 1, 1, 1, 448, 1439, 662, 50, 91, 'BOARDWALKTECH', 0], ('down', 506)], [[5, 1, 8, 1, 2, 3, 720, 1523, 203, 50, 95, 'WOLF', 0], ('down', 590)], [[5, 1, 8, 1, 2, 4, 945, 1524, 97, 48, 93, 'RD', 0], ('down', 591)], [[5, 1, 9, 1, 1, 2, 896, 1607, 97, 50, 94, 'CA', 0], ('down', 674)], [[5, 1, 9, 1, 1, 3, 1015, 1607, 177, 50, 96, '95014', 0], ('down', 674)], [[5, 1, 9, 2, 1, 3, 767, 1774, 408, 50, 89, '650-618-6100', 0], ('down', 841)], [[5, 1, 9, 2, 2, 3, 694, 1858, 408, 50, 96, '650-618-6206', 0], ('down', 925)], [[5, 1, 10, 1, 1, 2, 902, 2077, 408, 55, 94, 'address', 0], ('down', 1144)], [[5, 1, 10, 1, 1, 2, 902, 2077, 408, 55, 94, ':', 1], ('down', 1144)], [[5, 1, 10, 2, 1, 1, 464, 2163, 435, 50, 84, 'ACCENTURE', 0], ('down', 1230)], [[5, 1, 10, 3, 1, 2, 594, 2246, 293, 50, 95, 'CAMPUS', 0], ('down', 1313)], [[5, 1, 10, 3, 1, 3, 910, 2247, 220, 49, 92, 'DRIVE', 0], ('down', 1314)], [[5, 1, 10, 3, 2, 2, 839, 2330, 208, 61, 92, 'park', 0], ('down', 1397)], [[5, 1, 10, 3, 2, 2, 839, 2330, 208, 61, 92, ',', 1], ('down', 1397)], [[5, 1, 12, 1, 1, 2, 848, 2690, 132, 55, 95, 'to', 0], ('down', 1757)], [[5, 1, 12, 1, 1, 2, 848, 2690, 132, 55, 95, ':', 1], ('down', 1757)], [[5, 1, 12, 1, 2, 1, 466, 2773, 1035, 67, 85, 'edsel.j.d.manucom', 0], ('down', 1840)], [[5, 1, 12, 1, 2, 1, 466, 2773, 1035, 67, 85, '@', 1], ('down', 1840)], [[5, 1, 12, 1, 2, 1, 466, 2773, 1035, 67, 85, 'accenture.com', 2], ('down', 1840)], [[5, 1, 13, 1, 4, 2, 640, 3129, 256, 52, 94, 'element', 0], ('down', 2196)], [[5, 1, 13, 1, 4, 2, 640, 3129, 256, 52, 94, ':', 1], ('down', 2196)], [[5, 1, 13, 1, 5, 2, 711, 3213, 181, 52, 95, 'order', 0], ('down', 2280)], [[5, 1, 13, 1, 5, 2, 711, 3213, 181, 52, 95, ':', 1], ('down', 2280)], [[5, 1, 13, 1, 7, 2, 807, 3383, 205, 50, 94, 'center', 0], ('down', 2450)], [[5, 1, 13, 1, 7, 2, 807, 3383, 205, 50, 94, ':', 1], ('down', 2450)], [[5, 1, 13, 1, 7, 3, 1039, 3383, 360, 50, 95, '0000900000', 0], ('down', 2450)], [[5, 1, 13, 1, 8, 3, 831, 3466, 130, 50, 96, 'Cost', 0], ('down', 2533)], [[5, 1, 13, 1, 8, 4, 982, 3466, 206, 50, 96, 'center', 0], ('down', 2533)], [[5, 1, 13, 1, 8, 4, 982, 3466, 206, 50, 96, ':', 1], ('down', 2533)], [[5, 1, 13, 1, 9, 2, 738, 3550, 356, 50, 94, '0010001015', 0], ('down', 2617)], [[5, 1, 13, 1, 10, 2, 713, 3632, 219, 67, 95, 'ledger', 0], ('down', 2699)], [[5, 1, 13, 1, 10, 2, 713, 3632, 219, 67, 95, ':', 1], ('down', 2699)], [[5, 1, 13, 1, 11, 2, 738, 3718, 353, 50, 94, '0000145011', 0], ('down', 2785)], [[5, 1, 13, 1, 12, 3, 749, 3800, 165, 52, 95, 'code', 0], ('down', 2867)], [[5, 1, 13, 1, 12, 3, 749, 3800, 165, 52, 95, ':', 1], ('down', 2867)], [[5, 1, 14, 1, 1, 4, 981, 3946, 1019, 67, 88, 'rashmi.kumari.jha', 0], ('down', 3013)], [[5, 1, 14, 1, 1, 4, 981, 3946, 1019, 67, 88, '@', 1], ('down', 3013)], [[5, 1, 14, 1, 1, 4, 981, 3946, 1019, 67, 88, 'accenture.com', 2], ('down', 3013)], [[5, 1, 14, 1, 1, 2, 700, 3948, 223, 50, 96, 'Contact', 0], ('down', 3015)], [[5, 1, 14, 1, 1, 3, 948, 3963, 8, 35, 90, ':', 0], ('down', 3030)], [[5, 1, 15, 1, 1, 3, 900, 4132, 345, 55, 92, 'DETAILS', 0], ('down', 3199)], [[5, 1, 16, 1, 1, 2, 615, 4285, 418, 47, 96, 'DESCRIPTION', 0], ('down', 3352)], [[5, 1, 16, 1, 5, 1, 612, 4629, 669, 61, 84, 'LLC_BoardwalkTech_', 0], ('down', 3696)], [[5, 1, 16, 1, 6, 1, 614, 4706, 273, 61, 80, 'C_Annual', 0], ('down', 3773)], [[5, 1, 16, 1, 6, 2, 890, 4707, 83, 46, 91, '...', 0], ('down', 3774)], [[5, 1, 17, 1, 1, 2, 585, 4825, 328, 62, 93, 'description', 0], ('down', 3892)], [[5, 1, 17, 1, 1, 2, 585, 4825, 328, 62, 93, ':', 1], ('down', 3892)], [[5, 1, 17, 1, 1, 3, 936, 4825, 230, 62, 89, 'Proquire', 0], ('down', 3892)], [[5, 1, 18, 1, 1, 1, 376, 5420, 1723, 76, 58, 'https', 0], ('down', 4487)], [[5, 1, 18, 1, 1, 1, 376, 5420, 1723, 76, 58, ':', 1], ('down', 4487)], [[5, 1, 18, 1, 1, 1, 376, 5420, 1723, 76, 58, '//s1.ariba.com/buyer/render/1hx982g4bjpv', 2], ('down', 4487)]]]]]], {'right': 0, 'down': 2, 'equal': 0}, {'min': 99085, 'max': 99085}]]

    #     out_put = self.x.extract_list_expression(l_data)
    #     # print(out_put)

    # def test_get(self):
    #     l_keywords = ['ORDER NO',[[[5, 1, 3, 1, 1, 1, 452, 852, 389, 81, 95, 'ORDER', 0], [5, 1, 3, 1, 1, 2, 881, 852, 179, 81, 93, 'no', 0]]]]
    #     l_list_name = 'Purchase order number'
    #     out_put = self.x.get(l_list_name, l_keywords)

    #     # no keywords
    #     # out_put = self.x.get(l_list_name)

    #     # for o in out_put:
    #     #     print('----------')
    #     #     print(o)



        


        

if __name__ == "__main__":
    # TEL = testExpressionList()
    # TEL.setUp()
    # TEL.test_get()
    unittest.main()