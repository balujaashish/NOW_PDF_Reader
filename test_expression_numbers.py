import unittest
from Expression.expression_numbers import Expression_Numbers
import z_test_data

class testExpressionNumbers(unittest.TestCase):

    def setUp(self):
        self.PDF_Info = z_test_data.PDF_Info
        self.supporting_data = []
        self.attributes = []
        self.x = Expression_Numbers(self.PDF_Info, self.supporting_data, self.attributes)

    def test_qualify(self):
        l_int = [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0], [5, 1, 1, 1, 1, 4, 3690, 18, 22, 56, 95, '1', 0], [5, 1, 1, 1, 1, 6, 3835, 18, 36, 56, 95, '2', 0], [5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], [5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], [5, 1, 8, 1, 2, 1, 456, 1523, 171, 50, 96, '10050', 0], [5, 1, 8, 1, 2, 6, 1228, 1523, 106, 50, 96, '276', 0], [5, 1, 10, 3, 2, 4, 1171, 2330, 176, 50, 95, '07932', 0], [5, 1, 10, 3, 2, 7, 2222, 2330, 171, 50, 95, '60601', 0], [5, 1, 11, 1, 1, 3, 2089, 2498, 134, 50, 96, '1312', 0], [5, 1, 11, 1, 1, 4, 2247, 2498, 100, 50, 96, '693', 0], [5, 1, 11, 1, 1, 5, 2375, 2498, 135, 50, 95, '0161', 0], [5, 1, 11, 1, 2, 3, 2016, 2582, 134, 50, 96, '1312', 0], [5, 1, 11, 1, 2, 4, 2176, 2582, 99, 50, 91, '895', 0], [5, 1, 11, 1, 2, 5, 2300, 2582, 143, 50, 96, '4240', 0], [5, 1, 13, 1, 7, 3, 1039, 3383, 360, 50, 95, '0000900000', 0], [5, 1, 13, 1, 9, 2, 738, 3550, 356, 50, 94, '0010001015', 0], [5, 1, 13, 1, 11, 2, 738, 3718, 353, 50, 94, '0000145011', 0], [5, 1, 15, 1, 1, 4, 1279, 4130, 66, 71, 96, '1', 1], [5, 1, 16, 1, 4, 1, 466, 4551, 18, 46, 96, '1', 0], [5, 1, 16, 1, 4, 4, 1784, 4551, 18, 46, 95, '1', 0], [5, 1, 2, 1, 1, 4, 859, 100389, 18, 46, 96, '1', 0]]
        out_put = self.x.qualify(l_int)
        print(out_put)


    def test_prepare_number_data(self):
        l_int = [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0], [5, 1, 1, 1, 1, 4, 3690, 18, 22, 56, 95, '1', 0], [5, 1, 1, 1, 1, 6, 3835, 18, 36, 56, 95, '2', 0], [5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0], [5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], [5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], [5, 1, 8, 1, 2, 1, 456, 1523, 171, 50, 96, '10050', 0], [5, 1, 8, 1, 2, 6, 1228, 1523, 106, 50, 96, '276', 0], [5, 1, 10, 3, 2, 7, 2222, 2330, 171, 50, 95, '60601', 0], [5, 1, 11, 1, 1, 3, 2089, 2498, 134, 50, 96, '1312', 0], [5, 1, 11, 1, 1, 4, 2247, 2498, 100, 50, 96, '693', 0], [5, 1, 11, 1, 2, 3, 2016, 2582, 134, 50, 96, '1312', 0], [5, 1, 11, 1, 2, 4, 2176, 2582, 99, 50, 91, '895', 0], [5, 1, 11, 1, 2, 5, 2300, 2582, 143, 50, 96, '4240', 0], [5, 1, 15, 1, 1, 4, 1279, 4130, 66, 71, 96, '1', 1], [5, 1, 16, 1, 4, 1, 466, 4551, 18, 46, 96, '1', 0], [5, 1, 16, 1, 4, 4, 1784, 4551, 18, 46, 95, '1', 0], [5, 1, 2, 1, 1, 4, 859, 100389, 18, 46, 96, '1', 0]]
        out_put = self.x.prepare_number_data(l_int)
        print(out_put)
        # for o in out_put:
        #     print(o)

    def test_number_expression(self):
        l_int = [['6000567751', [[5, 1, 1, 1, 1, 2, 594, 18, 402, 57, 95, '6000567751', 0]]], ['1', [[5, 1, 1, 1, 1, 4, 3690, 18, 22, 56, 95, '1', 0]]], ['2', [[5, 1, 1, 1, 1, 6, 3835, 18, 36, 56, 95, '2', 0]]], ['6000567751', [[5, 1, 3, 1, 1, 3, 1103, 853, 585, 80, 96, '6000567751', 0]]], ['20', [[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0]]], ['2020', [[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0]]], ['10050', [[5, 1, 8, 1, 2, 1, 456, 1523, 171, 50, 96, '10050', 0]]], ['276', [[5, 1, 8, 1, 2, 6, 1228, 1523, 106, 50, 96, '276', 0]]], ['60601', [[5, 1, 10, 3, 2, 7, 2222, 2330, 171, 50, 95, '60601', 0]]], ['1312', [[5, 1, 11, 1, 1, 3, 2089, 2498, 134, 50, 96, '1312', 0]]], ['693', [[5, 1, 11, 1, 1, 4, 2247, 2498, 100, 50, 96, '693', 0]]], ['1312', [[5, 1, 11, 1, 2, 3, 2016, 2582, 134, 50, 96, '1312', 0]]], ['895', [[5, 1, 11, 1, 2, 4, 2176, 2582, 99, 50, 91, '895', 0]]], ['4240', [[5, 1, 11, 1, 2, 5, 2300, 2582, 143, 50, 96, '4240', 0]]], ['1', [[5, 1, 15, 1, 1, 4, 1279, 4130, 66, 71, 96, '1', 1]]], ['1', [[5, 1, 16, 1, 4, 1, 466, 4551, 18, 46, 96, '1', 0]]], ['1', [[5, 1, 16, 1, 4, 4, 1784, 4551, 18, 46, 95, '1', 0]]], ['1', [[5, 1, 2, 1, 1, 4, 859, 100389, 18, 46, 96, '1', 0]]]]

        l_keyword = ['QTY', [[[5, 1, 16, 1, 1, 4, 1779, 4285, 125, 50, 89, 'QTY', 0]]]]
        out_put = self.x.number_expression(l_keyword, l_int)
        print(out_put)

    def test_extract_number_expression(self):
        l_int = [['QTY', '1', [[[5, 1, 16, 1, 1, 4, 1779, 4285, 125, 50, 89, 'QTY', 0], [[[[5, 1, 16, 1, 4, 4, 1784, 4551, 18, 46, 95, '1', 0], ('down', 216)], []]]]], {'right': 0, 'down': 1, 'equal': 0}, {'min': 216, 'max': 216}]]
        out_put = self.x.extract_number_expression(l_int)
        print(out_put)

    def test_get(self):
        l_keyword = ['QTY', [[[5, 1, 16, 1, 1, 4, 1779, 4285, 125, 50, 89, 'QTY', 0]]]]
        out_put = self.x.get(l_keyword)
        print(out_put)




if __name__ == "__main__":
    TEN = testExpressionNumbers()
    TEN.setUp()
    TEN.test_get()