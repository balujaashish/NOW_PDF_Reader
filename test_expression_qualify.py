import unittest
from Expression.expression_qualify import Expression_Qualify
from Expression.supporting_data import Supporting_Data
import z_test_data

class testExpressionQualify(unittest.TestCase):

    def setUp(self):
        self.PDF_Info = z_test_data.PDF_Info
        p_data = {(2000010, 838, 8389,'Purchase order number'): [[9829,939, 883,'6000567751'],[9829,939,921,'February 20, 2020']],(2000011, 839, 8390,'Addresses'):[[9830,940, 884,'BOARDWALKTECH, INC 10050 N. Wolfe Rd. #276 Cupertino , CA 95014 United States'], [9831,941, 885,'Teva Bazel 5 5 Bazel St. 4951033 Petah Tikva Israel']],(2000011, 839, 8390,'keywords'):[[9830,940, 884,'Amount'], [9830,940, 884,'ORDER NO']]}
        self.supporting_data = Supporting_Data(p_data)
        self.attributes = {}
        self.x = Expression_Qualify(self.PDF_Info, self.supporting_data, self.attributes)

    
    


    def test_qualify_expression_match_term_align_dtls(self):
        term_align = [[5, 1, 4, 1, 1, 1, 454, 973, 203, 53, 95, 'Issued', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 477)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 907)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]]]]

        l_allowed_terms = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        out_put = self.x.qualify_expression_match_term_align_dtls(term_align, l_allowed_terms)
        print(out_put)

    def test_get_keywod_and_value_terms(self):
        l_align = [[[5, 1, 4, 1, 1, 1, 454, 973, 203, 53, 95, 'Issued', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 477)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 907)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]]]], [[5, 1, 4, 1, 1, 2, 685, 986, 74, 40, 96, 'on', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 375)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 683)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 683)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 805)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]]]]]
        l_key, l_val = self.x.get_keywod_and_value_terms(l_align)
        print('-----------------key---------------')
        print(l_key)
        print('-----------------val---------------')
        print(l_val)


    def test_qualify_expression_match(self):
        l_expression_match = ['Issued on', 'February 20, 2020', [[[[5, 1, 4, 1, 1, 1, 454, 973, 203, 53, 95, 'Issued', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 477)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 907)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]]]], [[5, 1, 4, 1, 1, 2, 685, 986, 74, 40, 96, 'on', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 375)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 683)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 683)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 805)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]]]]], {'right': 8, 'down': 0, 'equal': 0}, {'min': 375, 'max': 907}]]

        l_allowed_terms = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

        self.x.qualify_each_expression_match(l_expression_match, l_allowed_terms)
    
    def test_qualify(self):
        p_exp_match = [['Issued on', 'February 20, 2020', [[[[5, 1, 4, 1, 1, 1, 454, 973, 203, 53, 95, 'Issued', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 477)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 785)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 907)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 129)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 129)]]]]], [[5, 1, 4, 1, 1, 2, 685, 986, 74, 40, 96, 'on', 0], [[[[5, 1, 4, 1, 1, 4, 1134, 973, 286, 67, 95, 'February', 0], ('right', 375)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, '20', 0], ('right', 683)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 5, 1442, 973, 94, 62, 95, ',', 1], ('right', 683)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]], [[[5, 1, 4, 1, 1, 6, 1564, 973, 157, 53, 95, '2020', 0], ('right', 805)], [[[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, 'thursday', 0], ('right', 27)], [[5, 1, 4, 1, 1, 3, 786, 973, 316, 67, 95, ',', 1], ('right', 27)]]]]]], {'right': 8, 'down': 0, 'equal': 0}, {'min': 375, 'max': 907}]]]

        p_allowed_terms = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        self.x.supporting_data.data['allowed_terms date'] = p_allowed_terms
        self.x.attributes['allowed_terms date'] = 'allowed_terms date'
        out_put = self.x.qualify(p_exp_match, 'allowed_terms date')
        print('---------------------------------')
        print(out_put)



if __name__ == "__main__":
    TEQ = testExpressionQualify()
    TEQ.setUp()
    TEQ.test_qualify()
